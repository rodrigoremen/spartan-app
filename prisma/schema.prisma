// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  lastName  String?
  email     String    @unique
  password  String
  role      String    @default("administrativo")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]
}

model Project {
  id                Int         @id @default(autoincrement())
  revision          Float
  folio             String      @unique
  cliente           String
  proyecto          String
  fechaEntrega      DateTime
  email             String
  telefono          String
  elaborado         String
  autorizado        String
  atencion          String
  estado            Int?        @default(0)
  notas             String
  tiempoEntrega     String
  nota              String
  normas            String
  incluye           String
  formaPago         String
  avanceFinanciero  Int?        @default(0)
  avanceProduccion  Int?        @default(0)
  avanceInstalacion Int?        @default(0)
  situacionGeneral  String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  userId            Int
  user              User        @relation(fields: [userId], references: [id])
  servicios         Service[]
  acuerdos          Acuerdos[]
  conceptos         Conceptos[]
  actividades       Actividad[]
  problemas         Problemas[]
  photos            Photos[]
}

model Service {
  id             Int     @id @default(autoincrement())
  cantidad       Float
  descripcion    String
  precioUnitario Float
  importe        Float
  projectId      Int
  project        Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Acuerdos {
  id            Int      @id @default(autoincrement())
  objetivo      String
  estado        String
  fechaEntrega  String
  responsable   String
  observaciones String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  projectId     Int
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Conceptos {
  id            Int      @id @default(autoincrement())
  concepto      String
  status        String
  tecnico       String
  avance        Int
  fechaEstimada String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  projectId     Int
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  photos        Photos[]
}

model Actividad {
  id            Int      @id @default(autoincrement())
  actividad     String
  tiempoEntrega String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  projectId     Int
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Problemas {
  id        Int      @id @default(autoincrement())
  problemas String
  respuesta String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Photos {
  id        Int       @id @default(autoincrement())
  url       String
  conceptId Int
  conceptos Conceptos @relation(fields: [conceptId], references: [id])
  Project   Project?  @relation(fields: [projectId], references: [id])
  projectId Int?
}
